// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © ashwagamma

//@version=5
indicator("HAZZONES", overlay = true, max_boxes_count = 200)

maxNumOfBoxes = input.int(defval=15, title='Maximum # of Zone Displayed', minval=1, maxval=100, tooltip='Minimum = 1, Maximum = 100')
numBullBearHA = input.int(defval = 5, title='Number of bull/bear HA candles', minval=1, maxval=10)
tf = input.timeframe("", "Timeframe")
supBoxColor = input.color(defval=color.new(color.green, 80), title='Support Zone Color', group="Support Zone Style")
supBoxBorderColor = input.color(defval=color.new(color.green, 70), title='Support Zone Border Color', group="Support Zone Style")
resBoxColor = input.color(defval=color.new(color.red, 80), title='Resistance Zone Color', group="Resistance Zone Style")
resBoxBorderColor = input.color(defval=color.new(color.red, 70), title='Resistance Zone Border Color', group="Resistance Zone Style")
showMitigatedZones = input.bool(defval=true, title='Show mitigated zones?', group="Mitigated Zone Style")
mitResBoxColor = input.color(defval=color.new(color.gray, 85), title='Mitigated Resistance Zone Color', group="Mitigated Zone Style", tooltip='Set Transparency to 0 to make mitigated Boxes disappear')
mitResBoxBorderColor = input.color(defval=color.new(color.red, 70), title='Mitigated Resistance Zone Border Color', group="Mitigated Zone Style", tooltip='Set Transparency to 0 to make mitigated Boxes disappear')
mitSupBoxColor = input.color(defval=color.new(color.gray, 85), title='Mitigated Support Zone Color', group="Mitigated Zone Style", tooltip='Set Transparency to 0 to make mitigated Boxes disappear')
mitSupBoxBorderColor = input.color(defval=color.new(color.green, 70), title='Mitigated Support Zone Border Color', group="Mitigated Zone Style", tooltip='Set Transparency to 0 to make mitigated Boxes disappear')

isStrongBullishTrend(o, h, l, c) =>
    ta.barssince(c<=o)-1==numBullBearHA and numBullBearHA == ta.barssince(not((c>o and h>c and l-o>-1*(h-l)/10) or ((c[1]>o[1] and h[1]>c[1] and l[1]-o[1]>-1*(h[1]-l[1])/10) and c>=o) or ((c[2]>o[2] and h[2]>c[2] and l[2]-o[2]>-1*(h[2]-l[2])/5) and c>=o and c[1]>=o[1])))

isStrongBearishTrend(o, h, l, c) =>
    ta.barssince(c>=o)-1==numBullBearHA and numBullBearHA == ta.barssince(not((c<o and l<c and o-h>-1*(h-l)/10) or ((c[1]<o[1] and l[1]<c[1] and o[1]-h[1]>-1*(h[1]-l[1])/10) and c<=o) or ((c[2]<o[2] and l[2]<c[2] and o[2]-h[2]>-1*(h[2]-l[2])/5) and c<=o and c[1]<=o[1])))    

var box[] _supports = array.new_box()
var box[] _resistances = array.new_box()
int delT = na

[o, h, l, c] = request.security(ticker.heikinashi(syminfo.tickerid), tf, [open, high, low, close])
[sz_open, sz_high, sz_low, sz_close] = request.security(ticker.heikinashi(syminfo.tickerid), tf, [open[ta.barssince(close<=open)], high[ta.barssince(close<=open)], low[ta.barssince(close<=open)], close[ta.barssince(close<=open)]])
[rz_open, rz_high, rz_low, rz_close] = request.security(ticker.heikinashi(syminfo.tickerid), tf, [open[ta.barssince(close>=open)], high[ta.barssince(close>=open)], low[ta.barssince(close>=open)], close[ta.barssince(close>=open)]])
[isStrongBullishTrend, isStrongBearishTrend] = request.security(ticker.heikinashi(syminfo.tickerid), tf, [isStrongBullishTrend(open, high, low, close), isStrongBearishTrend(open, high, low, close)])
[supBoxBarDelta, resBoxBarDelta] = request.security(ticker.heikinashi(syminfo.tickerid), tf, [(ta.barssince(close<=open)), (ta.barssince(close>=open))])

if isStrongBullishTrend and not(isStrongBullishTrend[1]) and barstate.isconfirmed
    box supbox = na
    supbox := box.new(bar_index-supBoxBarDelta, sz_high, bar_index+1, sz_low, xloc = xloc.bar_index, border_color = supBoxBorderColor, bgcolor=supBoxColor)
    if array.size(_supports) > maxNumOfBoxes
        box.delete(array.shift(_supports))
    array.push(_supports, supbox)


if isStrongBearishTrend and not(isStrongBearishTrend[1]) and barstate.isconfirmed
    box resbox = na
    resbox := box.new(bar_index-resBoxBarDelta, rz_high, bar_index+1, rz_low, xloc = xloc.bar_index, border_color = resBoxBorderColor, bgcolor=resBoxColor)
    if array.size(_resistances) > maxNumOfBoxes
        box.delete(array.shift(_resistances))
    array.push(_resistances, resbox)

if array.size(_supports) > 0 and barstate.isconfirmed
    for i = array.size(_supports) - 1 to 0 by 1
        _box = array.get(_supports, i)
        _boxLow = box.get_bottom(_box)
        _boxHigh = box.get_top(_box)
        _boxRight = box.get_right(_box)
        _boxLeft = box.get_left(_box)
        if bar_index == _boxRight
            if c >= _boxLow
                box.set_right(_box, bar_index + 1)
            else 
                if showMitigatedZones
                    box.set_bgcolor(_box, mitSupBoxColor)
                    box.set_border_color(_box, mitSupBoxBorderColor)
                    //array.set(_isSupMitigated, i, true)
                else
                    array.remove(_supports, i)
                    box.delete(_box)

if array.size(_resistances) > 0 and barstate.isconfirmed
    for i = array.size(_resistances) - 1 to 0 by 1
        _box = array.get(_resistances, i)
        _boxLow = box.get_bottom(_box)
        _boxHigh = box.get_top(_box)
        _boxRight = box.get_right(_box)
        if bar_index == _boxRight
            if c <= _boxHigh
                box.set_right(_box, bar_index + 1)
            else
                if showMitigatedZones
                    box.set_bgcolor(_box, mitResBoxColor)
                    box.set_border_color(_box, mitResBoxBorderColor)
                    //array.set(_isResMitigated, i, true)
                else
                    array.remove(_resistances, i)
                    box.delete(_box)

